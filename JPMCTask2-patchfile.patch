From acf851f8f1d3f8dbcf02959b6dcc723ac5711ae2 Mon Sep 17 00:00:00 2001
From: kavya1230 <kavyasri.veeravalli@gmail.com>
Date: Sat, 21 Oct 2023 23:34:27 +0530
Subject: [PATCH] Create Patch File

---
 README.md                 |     2 +-
 datafeed/requirements.txt |     2 +-
 datafeed/server3.py       |     4 +-
 package.json              |     2 +-
 public/index.html         |     1 +
 src/App.tsx               |    31 +-
 src/DataStreamer.ts       |     2 +-
 src/Graph.tsx             |    14 +-
 test.csv                  |     1 +
 tsconfig.json             |     1 +
 10 files changed, 60 insertions(+), 57 deletions(-)

diff --git a/README.md b/README.md
index 6712756..bd9d348 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,2 @@
 # JPMC Task 2
-Starter repo for task 2 of JPMC's Forage program
+Task 2 of JPMC's Forage program
diff --git a/datafeed/requirements.txt b/datafeed/requirements.txt
index f678e82..d495242 100644
--- a/datafeed/requirements.txt
+++ b/datafeed/requirements.txt
@@ -1 +1 @@
-python-dateutil==2.8.2
\ No newline at end of file
+python-dateutil==3.11.4
\ No newline at end of file
diff --git a/datafeed/server3.py b/datafeed/server3.py
index 68f4659..5cc66e2 100644
--- a/datafeed/server3.py
+++ b/datafeed/server3.py
@@ -218,7 +218,7 @@ def get(req_handler, routes):
                 return
-def run(routes, host='0.0.0.0', port=8080):
+def run(routes, host='0.0.0.0', port=6078):
     """ Runs a class as a server whose methods have been decorated with
         @route.
     """
@@ -234,7 +234,7 @@ def run(routes, host='0.0.0.0', port=8080):
     thread = threading.Thread(target=server.serve_forever)
     thread.daemon = True
     thread.start()
-    print('HTTP server started on port 8080')
+    print('HTTP server started on port 6078')
     while True:
         from time import sleep
         sleep(1)
diff --git a/package-lock.json b/package-lock.json
index 21b4315..63aa787 100644
--- a/package-lock.json
+++ b/package-lock.json

@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph:boolean
 }
 
 /**
@@ -15,6 +16,11 @@ interface IState {
  * It renders title, button and Graph react element.
  */
 class App extends Component<{}, IState> {
+  state: {
+    // data saves the server responds.
+    // We use this state to parse data down to the child element (Graph) as element property
+    data: never[]; showGraph: boolean;
+  };
   constructor(props: {}) {
     super(props);
 
@@ -22,6 +28,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph:false,
     };
   }
 
@@ -29,18 +36,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph)
+      return (<Graph data={this.state.data}/>)
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
+  }
+  setState(arg0: { data: ServerRespond[]; showGraph: boolean; }) {
+    throw new Error('Method not implemented.');
   }
 
   /**
diff --git a/src/DataStreamer.ts b/src/DataStreamer.ts
index 78583cb..526f15b 100644
--- a/src/DataStreamer.ts
+++ b/src/DataStreamer.ts
@@ -15,7 +15,7 @@ export interface ServerRespond {
 
 class DataStreamer {
   // The url where datafeed server is listening
-  static API_URL: string = 'http://localhost:8080/query?id=1';
+  static API_URL: string = 'http://localhost:6078/query?id=1';
 
   /**
    * Send request to the datafeed server and executes callback function on success
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..58dde0d 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -25,14 +25,16 @@ interface PerspectiveViewerElement {
 class Graph extends Component<IProps, {}> {
   // Perspective table
   table: Table | undefined;
+  props: any;
 
   render() {
     return React.createElement('perspective-viewer');
   }
 
   componentDidMount() {
+    console.log('rendering');
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -41,14 +43,20 @@ class Graph extends Component<IProps, {}> {
       timestamp: 'date',
     };
 
-    if (window.perspective && window.perspective.worker()) {
+    if (window.perspective ) {
       this.table = window.perspective.worker().table(schema);
     }
     if (this.table) {
+      console.log('change table');
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
     }
   }
 
diff --git a/test.csv b/test.csv
index d2b2a10..783ce01 100644
--- a/test.csv
+++ b/test.csv
@@ -1,3 +1,4 @@
+2019-01-31 08:07:20.411698,ABC,buy,115.46,245
 2019-02-01 00:30:00.966511,ABC,buy,118.24,21
 2019-02-01 16:29:33.406644,DEF,buy,120.09,71
 2019-02-02 18:37:52.442361,ABC,buy,120.09,131
diff --git a/tsconfig.json b/tsconfig.json
index 0980b23..53775e4 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,3 +1,4 @@
+
 {
   "compilerOptions": {
     "target": "es5",
-- 
2.42.0.windows.2

